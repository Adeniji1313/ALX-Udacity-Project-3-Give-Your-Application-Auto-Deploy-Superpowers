version: 2.1

orbs:
  slack: circleci/slack@4.1
commands:
  destroy-environment:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      steps:
        - run:
            name: Destroy environments
            when: on_fail
            command: |
              aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
              aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
              aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration     
    steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |
                #SUCCESS=$(curl --insecure  https://kvdb.io/WhX5ir3waHiQtMThD364XR/migration_${CIRCLE_WORKFLOW_ID:0:7})
                # Logic for reverting the database state
                #if (( $SUCCESS == 1 ));
                #then
                cd ~/project/backend
                npm install
                npm run migrations:revert
                #fi  
             
jobs:

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build Front-End
          command: |
              cd frontend
              npm install
              npm run build 
      - slack/notify:
          channel:  C03DAJYL3SM
          mentions: '@Abbas'
          template: success_tagged_deploy_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build Back-End
          command: |
              cd backend
              npm install
              npm run build
      - slack/notify:
          channel:  C03DAJYL3SM
          event: fail
          mentions: '@Abbas'
          template: basic_fail_1
      - save_cache:
          paths:
            - "~/"
          key: backend-build
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Test Front-End
          command:  |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Test Back-End
          command:  |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Audit the Front-End
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
            

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Audit the Back-End
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image:  amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install Tar and gzip
          command:  |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=project3 \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=project3 \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            sed -i '1!d' .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            

      - destroy-environment

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            
  configure-infrastructure:
    docker:
      - image:  python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [8a:7d:67:72:7f:71:35:89:65:bc:eb:cc:83:5d:1b:48]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add --upgrade tar
            apk add --upgrade gzip
            apk add ansible
            ansible --version
           
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

  run-migrations:
    docker:
      - image:  circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            sudo npm install -g npm@8.19.1
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/WhX5ir3waHiQtMThD364XR/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi

            

  deploy-frontend:
    docker:
    - image: circleci/node:16.10.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y tar gzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters Name=instance-state-name,Values=running --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive  

      - destroy-environment

  deploy-backend:
    docker:
    - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [8a:7d:67:72:7f:71:35:89:65:bc:eb:cc:83:5d:1b:48]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add --upgrade tar
            apk add --upgrade gzip
            apk add ansible
            apk add --update nodejs npm
            ansible --version
            apk add --no-cache aws-cli
            
      - run:
          name: Use Ansible to copy the files
          command: |
            cd backend

            touch .env
            echo ENVIRONMENT=prod > ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR="/home/ubuntu/app/src/migrations" >> ".env"
            echo TYPEORM_ENTITIES="/home/ubuntu/app/src/modules/domain/**/*.entity{.ts,.js}" >> ".env"
            echo TYPEORM_MIGRATIONS="/home/ubuntu/app/dist/migrations/*{.ts,.js}" >> ".env"
            # echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"

            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            ls
            cp artifact.tar.gz ~/project/.circleci/ansible/
            cd .circleci/ansible
            ls
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environment
      

  smoke-test:
    docker: 
      - image: python:3.7-alpine3.16 
      
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk update
            apk upgrade
            apk add curl
            apk add --no-cache aws-cli
            apk add --update nodejs npm
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters Name=instance-state-name,Values=running --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"

            sleep 60

            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 1
            fi
      # - destroy-environment
      - revert-migrations

    
            
workflows:
  project3:
    jobs:
      # - build-frontend:
          #context: abbas-context
    #   - build-backend:
     #     context: abbas-context  

    #  - test-frontend:
     #     requires: [build-frontend]
     # - test-backend:
      #    requires:
      #      - build-backend
     # - scan-frontend:
      #    requires: [test-frontend]
      #- scan-backend:
       #   requires: [test-backend]
      #- deploy-infrastructure
      #- configure-infrastructure:
       #   requires:
       #     - "deploy-infrastructure"
      # - run-migrations
      - build-frontend:
          context: abbas-context
      - build-backend:
          context: abbas-context
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          #filters:
           # branches:
              #only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      -  deploy-frontend:
           requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
