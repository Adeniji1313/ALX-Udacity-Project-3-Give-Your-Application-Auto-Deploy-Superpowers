version: 2.1

orbs:
  slack: circleci/slack@4.1
commands:
  destroy-environment:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      steps:
        - run:
            name: Destroy environments
            when: on_fail
            command: |
              aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
              aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
              exit 1
jobs:

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build Front-End
          command: |
              cd frontend
              npm install
              npm run build 
      - slack/notify:
          channel:  C03DAJYL3SM
          mentions: '@Abbas'
          template: success_tagged_deploy_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build Back-End
          command: |
              cd backend
              npm install
              npm run build
      - slack/notify:
          channel:  C03DAJYL3SM
          event: fail
          mentions: '@Abbas'
          template: basic_fail_1
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Test Front-End
          command:  |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Test Back-End
          command:  |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Audit the Front-End
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
            

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Audit the Back-End
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image:  amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=project3 \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=project3 \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query "Reservations[*].Instances[*].[PublicIpAddress]" \
            --output >> .circleci/ansible/inventory.txt
            exit 1

      - destroy-environment

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            

workflows:
  project3:
    jobs:
      # - build-frontend:
      #     context: abbas-context
    #   - build-backend:
     #     context: abbas-context  

    #  - test-frontend:
     #     requires: [build-frontend]
     # - test-backend:
      #    requires:
      #      - build-backend
     # - scan-frontend:
      #    requires: [test-frontend]
      #- scan-backend:
       #   requires: [test-backend]
      - deploy-infrastructure
